/*
 * Copyright 2020 The JEE Tracking System - JeeTS
 * Copyright 2020 Kristof Beiglb√∂ck kbeigl@jeets.org
 *
 * The JEE Tracking System licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *      www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * This protocol is modeled after the traccar database model.
 * traccar is a GTS by Anton Tananaev (anton.tananaev@gmail.com)
 * Protocol fields and messages and their relations are aligned 
 * with traccar's fields, tables and their relations.
 */
syntax = "proto3";
package org.jeets.protobuf;
option java_outer_classname = "Traccar"; // = default
option optimize_for = SPEED;

/* This message is sent from a Device to traccar GTS
 * and can include Positions and Events in one ORM. 
 */
message Device {
    string uniqueid = 1;
    repeated Position position = 2;
}

// This message maps to the Position entity in the traccar model
message Position {

//  int32  messageid  = x;
	// time of sending message
    uint64 devicetime = 1;
	// time of position aquisation
    uint64    fixtime = 2;
	// is message plausible, reliable [REMOVE!]
    bool        valid = 3;
     // wgs84 in decimal degrees +/- N/S
    double latitude   = 4;
     // wgs84 in decimal degrees +/- E/W
    double longitude  = 5;
	// meters [m] above see level
    double altitude   = 6;
    double accuracy   = 7;
	// N=0 E=90 S=180 W=270
    double course     = 8;
	// km/h
    double speed      = 9;
	// use protobuffer methodology
    string attributes = 10;
	// reversed Entity relation
    repeated Event event = 11;
}

message Event {
//  only one event per message ?
    EventType event = 1;  // [default = KEY_EVENT]
//  details for different event types
    AlarmType alarm = 2;
}

/* Event Types should be aligned with the target data model.
 * see org.traccar.model.Position Entity  */
enum EventType {
    KEY_NO_EVENT = 0;
    KEY_EVENT = 1;
    KEY_GPS = 2;
//  set detail with AlarmType
    KEY_ALARM = 3;
    KEY_STATUS = 4;
    KEY_ODOMETER = 5;
    KEY_POWER = 6;
    KEY_BATTERY = 7;
    KEY_FUEL = 8;
    KEY_RFID = 9;
    KEY_IGNITION = 10;
    KEY_CHARGE = 11;
    KEY_DISTANCE = 12;
    KEY_MOTION = 13;
    KEY_ARMED = 14;
    KEY_ACCURACY = 15;
    KEY_GEOFENCE = 16;
    KEY_ACCELERATION = 17;
    KEY_DEVICE_TEMP = 18;
}

//  TODO: org.traccar.model.Event
//  TYPE_DEVICE_MOVING = ;
//  TYPE_DEVICE_STOPPED = ;
//  TYPE_DEVICE_OVERSPEED = ;
//  TYPE_GEOFENCE_ENTER = ;
//  TYPE_GEOFENCE_EXIT = ;
//  TYPE_ALARM = ;
//  TYPE_IGNITION_ON = ;
//  TYPE_IGNITION_OFF = ;


/* Alarm Types should be aligned with the target data model.
 * see org.traccar.model.Position Entity  */
enum AlarmType {
    ALARM = 0;
    ALARM_GENERAL = 1;
    ALARM_SOS = 2;
    ALARM_VIBRATION = 3;
    ALARM_MOVEMENT = 4;
    ALARM_LOW_SPEED = 5;
    ALARM_OVERSPEED = 6;
    ALARM_FALL_DOWN = 7;
    ALARM_LOW_POWER = 8;
    ALARM_LOW_BATTERY = 9;
    ALARM_FAULT = 10;
    ALARM_POWER_OFF = 11;
    ALARM_POWER_ON = 12;
    ALARM_DOOR = 13;
    ALARM_GEOFENCE = 14;
    ALARM_GEOFENCE_ENTER = 15;
    ALARM_GEOFENCE_EXIT = 16;
    ALARM_GPS_ANTENNA_CUT = 17;
    ALARM_ACCIDENT = 18;
    ALARM_TOW = 19;
    ALARM_ACCELERATION = 20;
    ALARM_BREAKING = 21;
    ALARM_FATIGUE_DRIVING = 22;
    ALARM_POWER_CUT = 23;
    ALARM_JAMMING = 24;
    ALARM_TEMPERATURE = 25;
    ALARM_PARKING = 26;
    ALARM_SHOCK = 27;
    ALARM_BONNET = 28;
    ALARM_FOOT_BRAKE = 29;
    ALARM_OIL_LEAK = 30;
    ALARM_TAMPERING = 31;
}

message Acknowledge {
//   bad choice, redesign ..
//   TODO: change int deviceId to String uniqueId to match Traccar Protocol purpose
     int32 deviceid  = 1;
//   int32 messageid = x;
//   MsgType = y;
}

//	enum MsgType {
//	  ACK = 0;	// not needed as ACK should reflect received MsgType
//	  GPS = 1;
//	}
