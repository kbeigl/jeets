# This file holds all configurable jeets properties and is aligned with individual projects for each release.
# The file should only be modified manually and can then be propagated to the projects in a Maven Build.
# In order to customize the jeets to other environments, i.e. customer production, 
# the file can also be copied, renamed and replace the default file via <cmdline>
# The main jeets properties are also used to synchronize integration tests
# using the same port and host to send and receive messages.

# you can also use - but should not override - maven properties 
# this original file is configured for jeets tests and releases

### re-align jeets.properties with paths in pom !!
### or move all paths from pom to jeets.properties
jeets.root.path=${jeets.repo.directory}
jeets.data.path=${jeets.repo.directory}/jeets-data

############## jeets-models ##############

##### jeets-pu-traccar ##### 
############################
# setup test db as default db for initial repo 'install'
# and activate postgres instance afterwards (below)
jeets.dbname=traccar4.1
# jeets.traccar.version=4.2 (no ERM changes!)
jeets.host=localhost

##### test ##### 
# jeets.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
jeets.hibernate.dialect=org.hibernate.dialect.H2Dialect
jeets.test.h2db.path=${jeets.repo.directory}/jeets-db/${jeets.dbname}

# jeets.test.jdbc.url=jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1;MVCC=TRUE
# jeets.test.jdbc.url=jdbc:h2:tcp://${db.host}:9092/./target/testsrvdb
# jeets.test.jdbc.url=jdbc:h2:tcp://${jeets.host}/${jeets.test.h2db.path}

# use file url to create database in pu-traccar project
# jeets.test.jdbc.url=jdbc:h2:${project.build.directory}/${jeets.dbname}
jeets.test.jdbc.url=jdbc:h2:${jeets.test.h2db.path}
# then use tcp url for integration tests (start server first!)
#jeets.test.jdbc.url=jdbc:h2:tcp://${jeets.host}/${project.build.directory}/${jeets.dbname}

jeets.test.jdbc.user=sa
jeets.test.jdbc.password=
jeets.test.jdbc.driver=org.h2.Driver
jeets.test.hibernate.show_sql=false
jeets.test.hibernate.dialect=${jeets.hibernate.dialect}

# postgres tests drop and create tables, but ..
# TODO: truncation syntax in truncateTables() must distinguish h2 <> pg
#	jeets.test.host=${jeets.host}
#	jeets.test.port=${jeets.db.port}
# MAKE SURE TO USE 'test' PREFIX, DON'T ACCESS PRODUCTION DB !!
#	jeets.test.dbname=test${jeets.dbname}
#	jeets.test.jdbc.url=jdbc:postgresql://${jeets.host}:${jeets.db.port}/${jeets.test.dbname}
#	jeets.test.jdbc.driver=org.postgresql.Driver
#	jeets.test.jdbc.user=postgres
#	jeets.test.jdbc.password=postgres

# find persistence-unit names in the code
jeets.db.port=5432
jeets.jdbc.url=jdbc:postgresql://${jeets.host}:${jeets.db.port}/${jeets.dbname}
jeets.jdbc.user=postgres
jeets.jdbc.password=postgres
jeets.jdbc.driver=org.postgresql.Driver

# override database installation with test db for initial repo install
# required for some spring IntegrationTest classes
jeets.jdbc.url=${jeets.test.jdbc.url}
jeets.jdbc.user=${jeets.test.jdbc.user}
jeets.jdbc.password=${jeets.test.jdbc.password}
jeets.jdbc.driver=${jeets.test.jdbc.driver}


###### jeets-protocols ######
#############################
# applied in modules below (add port here?)
jeets.protocol.traccar.protobuffer=protobuffer


###### jeets-protocols-traccar ######
#####################################
jeets.traccar.path=${jeets.repo.directory}/jeets-models/jeets-protocols-traccar
jeets.traccar.setupFile=${jeets.traccar.path}/setup/traccar.xml

############## jeets-clients ##############

####### jeets-tracker #######
#############################
# tracker only for protobuffers
# jeets.tracker.uniqueId=pb.device
jeets.tracker.uniqueId=${jeets.protocol.traccar.protobuffer}
jeets.tracker.host=${jeets.host}
jeets.tracker.port=6001
jeets.tracker.maxPosPerMsg=2
jeets.tracker.retryInMillis=10000
# jeets-tracker Main
jeets.tracker.sendInMillis=10000


############## jeets-server-JSE ##############
# TODO: wire ALL Camel Endpoints via properties

####### jeets-dcs ###### (adjust with clients)
########################
# align client and server
jeets.dcs.host=${jeets.host}
jeets.dcs.protobuffer.port=${jeets.tracker.port}
jeets.dcs.protobuffer.protocol=${jeets.protocol.traccar.protobuffer}
# in/output definitions, start/endpoints
# jeets.dcs.protobuffer.endpoint=//{{dcs.host}}:{{dcs.protobuffer.protocol}}?serverInitializerFactory=#device


####### jeets-etl ######
########################
# configure DCS inside ETL ??
# jeets.etl.dcs.host=${jeets.host}
# jeets.etl.dcs.protobuffer.port=${jeets.tracker.port}
# jeets.etl.dcs.protobuffer.protocol=${jeets.protocol.traccar.protobuffer}
# in/output definitions, start/endpoints
# jeets.etl.protobuffer.endpoint=//{{dcs.host}}:{{dcs.protobuffer.protocol}}?serverInitializerFactory=#device
