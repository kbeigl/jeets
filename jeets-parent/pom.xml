<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
    Copyright 2021 The Java EE Tracking System - JeeTS
    Copyright 2021 Kristof BeiglbÃ¶ck kbeigl@jeets.org
    
    The JEE Tracking System licenses this file to you 
    under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    	http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.jeets</groupId>
		<artifactId>jeets</artifactId>
		<version>1.3.1</version>
	</parent>

	<artifactId>jeets-parent</artifactId>
	<packaging>pom</packaging>

	<name>--- JeeTS - Global Definitions          ---</name>
	<description>
		Parent POM for common definitions and constants for all JeeTS sources.
	</description>
	<url>jeets.org/</url>

	<properties>
		<!-- 3.7.1 LTS, latest Jan, 2021 (removed 3.3.0) -->
		<camel.version>3.7.1</camel.version>
		<!-- 2.4.2 JANUARY 14, 2021 (removed 2.2.7.RELEASE) 
		     SHOULD BE IMPLIED IN CAMEL !! -->
	    <spring-boot-version>2.4.2</spring-boot-version>
		<!-- 'link to' camel-spring-boot-starter version !!
			 or how to use camel-ized plugin ? target: mvn spring-boot:run 
			 required for repackaging phase to -exec.jar -->

        <!-- matches traccar 4.2
        <postgresql.version> managed by spring boot bom, but version explicitly 
        required for sql-maven-plugin-version dependency in jeets-models
        stackoverflow.com/questions/11254356 -->
        <postgresql-version>42.2.5</postgresql-version>

		<!-- database/s -->
		<!-- remove hibernate version - managed by spring boot bom -->
		<hibernate-version>5.2.17.Final</hibernate-version>
		<h2database-version>1.3.176</h2database-version>
        <!-- jee-app: <version.h2db>1.4.193</version.h2db> -->
		<dbunit-version>2.6.0</dbunit-version>
		<sql-maven-plugin-version>1.5</sql-maven-plugin-version>
        <openjpa-version>2.4.1</openjpa-version>
        <apache-derby-version>10.11.2-RC</apache-derby-version>
        
		<!-- jeets and traccar protocols -->
        <protobuf-maven-plugin-version>0.6.1</protobuf-maven-plugin-version>
        <os-maven-plugin-version>1.6.0</os-maven-plugin-version>
		<!-- explicit for traccar protocols, align with camel-protobuf -->
        <protobuf-version>3.12.2</protobuf-version>

		<!-- project settings (complete repo?) -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- rterp.wordpress.com/2012/03/16/stamping-version-number-and-build-time-in-properties-file-with-maven/ -->
		<jeets.compile.time>${maven.build.timestamp}</jeets.compile.time>
		<maven.build.timestamp.format>dd.MM.yyyy HH:mm:ss</maven.build.timestamp.format>
		<jeets.properties.file>jeets.properties</jeets.properties.file>
		
		<!-- overridden in itests profile -->
		<skip.unit.tests>false</skip.unit.tests>
		<skip.integration.tests>true</skip.integration.tests>
		<!-- skip tests via command line:
		mvn clean install -Dskip.unit.tests=true 
		while -DskipTests does not apply here -->

		<!-- add multiple referenced versions here (itests etc.), 
			   add single referenced in dependencyManagement below.
				maybe access projects via local .m2 repo ?
				or move to jeets.props ...
        <tracker-version-latest>1.3</tracker-version-latest>
        <tracker-project-latest>jeets-tracker-${tracker-version-latest}</tracker-project-latest>
		<tracker-jar-with-dependencies>${tracker-project-latest}-jar-with-dependencies.jar</tracker-jar-with-dependencies>

        <protocols-traccar-version-latest>4.11</protocols-traccar-version-latest>
        <protocols-traccar-project-latest>jeets-protocols-traccar-${protocols-traccar-version-latest}</protocols-traccar-project-latest>
		<protocols-traccar-jar-with-dependencies>${protocols-traccar-project-latest}-jar-with-dependencies.jar</protocols-traccar-jar-with-dependencies>
		 -->
        <dcs-version-latest>1.3.1</dcs-version-latest>
        <dcs-project-latest>jeets-dcs-manager-${dcs-version-latest}</dcs-project-latest>
		<dcs-jar>${dcs-project-latest}-exec.jar</dcs-jar>

        <device-version-latest>1.3.1</device-version-latest>
        <device-project-latest>jeets-device-${device-version-latest}</device-project-latest>
		<device-exec-jar>${device-project-latest}-exec.jar</device-exec-jar>
        <device-send-folder>${jeets.repo.directory}/jeets-clients/jeets-device/send</device-send-folder>
        <data-send-folder>${jeets.repo.directory}/jeets-data/device.send</data-send-folder>

		<!-- maven settings
		<maven.compiler.source>1.9</maven.compiler.source>
		<maven.compiler.target>1.9</maven.compiler.target>
		 -->
		<maven.compiler.release>9</maven.compiler.release>

        <!-- maven plugins -->
        <maven-compiler-plugin-version>3.8.0</maven-compiler-plugin-version>
	    <maven-surefire-plugin-version>2.22.2</maven-surefire-plugin-version>
	    <maven-failsafe-plugin-version>2.22.2</maven-failsafe-plugin-version>

		<process-exec-maven-plugin-version>0.9</process-exec-maven-plugin-version>
        <directory-maven-plugin-version>0.3.1</directory-maven-plugin-version>
		
	    <maven-source-plugin-version>3.0.1</maven-source-plugin-version>
	    <!-- add maven-javadoc-plugin ! -->
        <maven-assembly-plugin-version>3.1.0</maven-assembly-plugin-version>
        <!-- latest? defaults to: 2.6-->
        <maven-resources-plugin-version>3.1.0</maven-resources-plugin-version>
		<build-helper-maven-plugin-version>1.10</build-helper-maven-plugin-version>
        
        <lifecycle-mapping-version>1.0.0</lifecycle-mapping-version>

		<exec-maven-plugin-version>1.6.0</exec-maven-plugin-version>

	    <!-- TODO -->
<!--    antrun - can temporarily be used to echo Maven's internal variables and values
		<maven-antrun-plugin-version>1.8</maven-antrun-plugin-version>
		<version-download-maven-plugin>1.3.0</version-download-maven-plugin>
        <version-maven-dependency-plugin>2.10</version-maven-dependency-plugin>
        <version-maven-release-plugin>2.5</version-maven-release-plugin>
        <version-maven-war-plugin>3.0.0</version-maven-war-plugin>  -->
	</properties>
	
    <dependencyManagement>
		<dependencies>
            <!-- Camel BOM (maybe move to main repo pom as global <parent> !!) -->
			<dependency>
				<groupId>org.apache.camel.springboot</groupId>
				<artifactId>camel-spring-boot-dependencies</artifactId>
				<version>${camel.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

		<!-- internal JeeTS dependencies: 
			lower level components included in higher level JeeTS components. 
			All hard coded versions should explicitly match version in module. -->
	        <dependency>
				<groupId>org.jeets</groupId>
				<artifactId>jeets-pu-traccar</artifactId>
	            <version>4.2</version>
	        </dependency>
			<dependency>
				<groupId>org.jeets</groupId>
				<artifactId>jeets-protocols</artifactId>
				<version>1.3.1</version>
			</dependency>
			<!-- 
			<dependency>
				<groupId>org.jeets</groupId>
				<artifactId>jeets-tracker</artifactId>
				<version>${tracker-version-latest}</version>
			</dependency>
			 -->
			<dependency>
				<groupId>org.jeets</groupId>
				<artifactId>jeets-device</artifactId>
				<version>${device-version-latest}</version>
			</dependency>
			<dependency>
				<groupId>org.jeets</groupId>
				<artifactId>jeets-player</artifactId>
				<version>1.2.0</version>
			</dependency>
			<dependency>
				<groupId>org.jeets</groupId>
				<artifactId>jeets-dcs-manager</artifactId>
				<version>1.3</version>
			</dependency>
			<dependency>
				<groupId>org.jeets</groupId>
				<artifactId>jeets-wildfly-activemq-adapter</artifactId>
	            <version>1.0</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- TEST-logging from camel-protobuf pom
    		 includes slf4j and log4j2 -->
	    <dependency>
	        <groupId>org.apache.logging.log4j</groupId>
	        <artifactId>log4j-slf4j-impl</artifactId>
	    </dependency>

      <!-- compare logging in cia2 samples parent pom:
      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-api</artifactId>
      </dependency>
      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-log4j12</artifactId>
      </dependency>
      <dependency>
        <groupId>log4j</groupId>
        <artifactId>log4j</artifactId>
      </dependency>
	 -->
 	</dependencies>

	<profiles>
	    <profile>
	        <id>itests</id>
	        <properties>
	            <skip.unit.tests>true</skip.unit.tests>
	            <skip.integration.tests>false</skip.integration.tests>
	        </properties>
	    </profile>
	    <!-- TODO: keep repo in java 8 and automatically kick in java 9 on higher versions
		<profile>
			<id>java-9</id>
			<activation>
				<jdk>9</jdk>
			</activation>
			.. add Java 9 specific configuration
		</profile>
		 -->
	</profiles>

	<build>
		<!-- Operating system and CPU architecture detection extension -->
		<extensions>
			<extension>
				<groupId>kr.motd.maven</groupId>
				<artifactId>os-maven-plugin</artifactId>
				<version>${os-maven-plugin-version}</version>
			</extension>
		</extensions>

		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>${maven-surefire-plugin-version}</version>
				    <configuration>
				        <skipTests>${skip.unit.tests}</skipTests>
						<!-- this is important to terminate target\surefire\surefirebooterXXX.jar 
							if test is cancelled with <CTRL> + <C>. Otherwise port remains blocked!! -->
						<shutdown>kill</shutdown>
				    </configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${maven-compiler-plugin-version}</version>
	                <configuration>
	                    <!-- 
	                    <source>${maven.compiler.source}</source>
	                    <target>${maven.compiler.target}</target>
	                     -->
	                    <release>${maven.compiler.release}</release>
	                </configuration>
				</plugin>
				<plugin>
				<!-- invoke with mvn source:jar or avoid specifying the source plugin in 
					each of the child projects. For this you need to put it to build -> plugins 
					section of parent pom, not build -> pluginManagement. â Andrew Logvinov -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<version>${maven-source-plugin-version}</version>
					<executions>
						<execution>
							<id>attach-sources</id>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>
					<!-- <inherited>true</inherited> ?? -->
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>${maven-assembly-plugin-version}</version>
					<configuration>
						<descriptorRefs>
							<descriptorRef>jar-with-dependencies</descriptorRef>
						</descriptorRefs>
					</configuration>
					<executions>
						<execution>
							<!-- this is used for inheritance merges -->
							<id>make-assembly</id>
                            <!-- difference? <id>assemble-all</id> -->
							<!-- bind to the packaging phase -->
							<phase>package</phase>
							<goals>
								<goal>single</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
				<!-- This plugin is meant to be run as part of the standard build lifecycle, 
					to help establish locations for files in multi module builds, 
					where the directory structure referenced is stable and will always be intact. 
					Inconsistencies can cause false positives or false negatives! -->
					<groupId>org.commonjava.maven.plugins</groupId>
					<artifactId>directory-maven-plugin</artifactId>
					<version>${directory-maven-plugin-version}</version>
					<executions>
						<execution>
							<id>directories</id>
							<goals>
								<goal>highest-basedir</goal>
							</goals>
							<phase>initialize</phase>
							<!-- <id>directories</id> -->
							<configuration>
								<!-- root for all paths ! -->
								<property>jeets.repo.directory</property>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>properties-maven-plugin</artifactId>
					<version>1.0.0</version>
					<configuration>
						<files>
							<!-- Properties are read from a single property file 
							      AND hard coded in the pom files like this: -->
							<file>${jeets.repo.directory}/${jeets.properties.file}</file>
						</files>
					</configuration>
					<executions>
						<!-- Load properties for the default lifecycle -->
						<execution>
							<id>default-lifecycle-properties</id>
							<phase>initialize</phase>
							<goals>
								<goal>read-project-properties</goal>
							</goals>
						</execution>
						<!-- Load properties for the clean lifecycle 
						<execution> <id>clean-lifecycle-properties</id> 
							<phase>pre-clean</phase> <goals> <goal>read-project-properties</goal> </goals> 
						</execution> -->
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>${maven-resources-plugin-version}</version>
					<configuration>
						<!-- apply ${project.build.sourceEncoding}? -->
						<encoding>UTF-8</encoding>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>${lifecycle-mapping-version}</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<!-- this is only used in pu ! move down ? simplify here -->
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>sql-maven-plugin</artifactId>
										<versionRange>${sql-maven-plugin-version}</versionRange>
										<goals>
											<goal>execute</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.commonjava.maven.plugins</groupId>
										<artifactId>directory-maven-plugin</artifactId>
										<versionRange>${directory-maven-plugin-version}</versionRange>
										<goals>
											<goal>highest-basedir</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute>
											<runOnIncremental>true</runOnIncremental>
											<runOnConfiguration>true</runOnConfiguration>
										</execute>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
				<plugin>
					<groupId>com.coveo</groupId>
					<artifactId>fmt-maven-plugin</artifactId>
					<version>2.10</version>
					<configuration>
						<verbose>true</verbose>
						<!-- see java.util.regex.Pattern javadoc. default: .*\.java <filesNamePattern>.*\.java</filesNamePattern> -->
						<filesPathPattern>.*org\\jeets\\.*</filesPathPattern>
						<skip>false</skip>
						<skipSortingImports>false</skipSortingImports>
						<style>google</style>
					</configuration>
					<executions>
						<execution>
							<goals>
								<goal>check</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
<!-- 			
				<plugin>  ** used in jeets-protocols-traccar **
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>${version-maven-dependency-plugin}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-release-plugin</artifactId>
					<version>${version-maven-release-plugin}</version>
					<configuration>
						<autoVersionSubmodules>true</autoVersionSubmodules>
						<tagNameFormat>@{project.version}</tagNameFormat>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-war-plugin</artifactId>
					<version>${version-maven-war-plugin}</version>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<version>${version-exec-maven-plugin}</version>
				</plugin> 
                <plugin>  ** used in jeets-protocols-traccar **
	                <artifactId>maven-enforcer-plugin</artifactId>
	                <version>1.4.1</version>
 -->
			</plugins>
		</pluginManagement>
	</build>

</project>
